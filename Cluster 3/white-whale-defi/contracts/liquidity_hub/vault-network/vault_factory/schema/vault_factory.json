{
  "contract_name": "vault_factory",
  "contract_version": "1.0.7",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "The instantiation message",
    "type": "object",
    "required": [
      "fee_collector_addr",
      "owner",
      "token_id",
      "vault_id"
    ],
    "properties": {
      "fee_collector_addr": {
        "description": "The address where fees get collected",
        "type": "string"
      },
      "owner": {
        "description": "The owner of the factory",
        "type": "string"
      },
      "token_id": {
        "description": "The code ID for the liquidity token contract",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "vault_id": {
        "description": "The code ID for the vault contract",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "The execution message",
    "oneOf": [
      {
        "description": "Creates a new vault given the asset info the vault should manage deposits and withdrawals for and the fees",
        "type": "object",
        "required": [
          "create_vault"
        ],
        "properties": {
          "create_vault": {
            "type": "object",
            "required": [
              "asset_info",
              "fees"
            ],
            "properties": {
              "asset_info": {
                "$ref": "#/definitions/AssetInfo"
              },
              "fees": {
                "$ref": "#/definitions/VaultFee"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Migrates vaults to the given code_id. If a [vault_addr] is provided, then migrates only that vault.",
        "type": "object",
        "required": [
          "migrate_vaults"
        ],
        "properties": {
          "migrate_vaults": {
            "type": "object",
            "required": [
              "vault_code_id"
            ],
            "properties": {
              "vault_addr": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "vault_code_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Removes a vault given its [AssetInfo]",
        "type": "object",
        "required": [
          "remove_vault"
        ],
        "properties": {
          "remove_vault": {
            "type": "object",
            "required": [
              "asset_info"
            ],
            "properties": {
              "asset_info": {
                "$ref": "#/definitions/AssetInfo"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates a vault config",
        "type": "object",
        "required": [
          "update_vault_config"
        ],
        "properties": {
          "update_vault_config": {
            "type": "object",
            "required": [
              "params",
              "vault_addr"
            ],
            "properties": {
              "params": {
                "$ref": "#/definitions/UpdateConfigParams"
              },
              "vault_addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates the configuration of the vault factory. If a field is not specified, it will not be modified.",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "fee_collector_addr": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "owner": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "token_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "vault_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AssetInfo": {
        "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "native_token"
            ],
            "properties": {
              "native_token": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Fee": {
        "type": "object",
        "required": [
          "share"
        ],
        "properties": {
          "share": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      },
      "UpdateConfigParams": {
        "type": "object",
        "properties": {
          "deposit_enabled": {
            "description": "If users should be able to deposit funds to the contract.",
            "type": [
              "boolean",
              "null"
            ]
          },
          "flash_loan_enabled": {
            "description": "If users should be allowed to perform flash-loans.",
            "type": [
              "boolean",
              "null"
            ]
          },
          "new_fee_collector_addr": {
            "description": "The new address of the fee collector",
            "type": [
              "string",
              "null"
            ]
          },
          "new_owner": {
            "description": "The new owner of the contract.",
            "type": [
              "string",
              "null"
            ]
          },
          "new_vault_fees": {
            "description": "The new fees used for the vault",
            "anyOf": [
              {
                "$ref": "#/definitions/VaultFee"
              },
              {
                "type": "null"
              }
            ]
          },
          "withdraw_enabled": {
            "description": "if users should be able to withdraw funds from the contract.",
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "VaultFee": {
        "description": "Fees used by the flashloan vaults on the liquidity hub",
        "type": "object",
        "required": [
          "burn_fee",
          "flash_loan_fee",
          "protocol_fee"
        ],
        "properties": {
          "burn_fee": {
            "$ref": "#/definitions/Fee"
          },
          "flash_loan_fee": {
            "$ref": "#/definitions/Fee"
          },
          "protocol_fee": {
            "$ref": "#/definitions/Fee"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "The query message",
    "oneOf": [
      {
        "description": "Retrieves the configuration of the vault.",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieves the address of a given vault.",
        "type": "object",
        "required": [
          "vault"
        ],
        "properties": {
          "vault": {
            "type": "object",
            "required": [
              "asset_info"
            ],
            "properties": {
              "asset_info": {
                "$ref": "#/definitions/AssetInfo"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieves the addresses for all the vaults.",
        "type": "object",
        "required": [
          "vaults"
        ],
        "properties": {
          "vaults": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AssetInfo": {
        "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "native_token"
            ],
            "properties": {
              "native_token": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "The migrate message",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "fee_collector_addr",
        "owner",
        "token_id",
        "vault_id"
      ],
      "properties": {
        "fee_collector_addr": {
          "$ref": "#/definitions/Addr"
        },
        "owner": {
          "$ref": "#/definitions/Addr"
        },
        "token_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "vault_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "vault": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_String",
      "type": [
        "string",
        "null"
      ]
    },
    "vaults": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultsResponse",
      "description": "Response for the vaults query",
      "type": "object",
      "required": [
        "vaults"
      ],
      "properties": {
        "vaults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VaultInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetInfo": {
          "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "VaultInfo": {
          "description": "Response for the vaults query",
          "type": "object",
          "required": [
            "asset_info",
            "asset_info_reference",
            "vault"
          ],
          "properties": {
            "asset_info": {
              "$ref": "#/definitions/AssetInfo"
            },
            "asset_info_reference": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "vault": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
