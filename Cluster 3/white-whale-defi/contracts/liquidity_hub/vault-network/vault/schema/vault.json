{
  "contract_name": "vault",
  "contract_version": "1.1.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "asset_info",
      "fee_collector_addr",
      "owner",
      "token_id",
      "vault_fees"
    ],
    "properties": {
      "asset_info": {
        "description": "The asset info the vault should manage.",
        "allOf": [
          {
            "$ref": "#/definitions/AssetInfo"
          }
        ]
      },
      "fee_collector_addr": {
        "description": "The address of the fee collector",
        "type": "string"
      },
      "owner": {
        "description": "The owner of the contract.",
        "type": "string"
      },
      "token_id": {
        "description": "The code ID of the liquidity token to instantiate",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "vault_fees": {
        "description": "The fees used for the vault",
        "allOf": [
          {
            "$ref": "#/definitions/VaultFee"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AssetInfo": {
        "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "native_token"
            ],
            "properties": {
              "native_token": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Fee": {
        "type": "object",
        "required": [
          "share"
        ],
        "properties": {
          "share": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      },
      "VaultFee": {
        "description": "Fees used by the flashloan vaults on the liquidity hub",
        "type": "object",
        "required": [
          "burn_fee",
          "flash_loan_fee",
          "protocol_fee"
        ],
        "properties": {
          "burn_fee": {
            "$ref": "#/definitions/Fee"
          },
          "flash_loan_fee": {
            "$ref": "#/definitions/Fee"
          },
          "protocol_fee": {
            "$ref": "#/definitions/Fee"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Deposits a given amount into the vault.",
        "type": "object",
        "required": [
          "deposit"
        ],
        "properties": {
          "deposit": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Flash-loans a given amount from the vault.",
        "type": "object",
        "required": [
          "flash_loan"
        ],
        "properties": {
          "flash_loan": {
            "type": "object",
            "required": [
              "amount",
              "msg"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "msg": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Collects the Protocol fees",
        "type": "object",
        "required": [
          "collect_protocol_fees"
        ],
        "properties": {
          "collect_protocol_fees": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates the configuration of the contract. If a field is not specified, it will not be modified.",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "$ref": "#/definitions/UpdateConfigParams"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "callback"
        ],
        "properties": {
          "callback": {
            "$ref": "#/definitions/CallbackMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CallbackMsg": {
        "description": "The callback messages available. Only callable by the vault contract itself.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "after_trade"
            ],
            "properties": {
              "after_trade": {
                "type": "object",
                "required": [
                  "loan_amount",
                  "old_balance"
                ],
                "properties": {
                  "loan_amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "old_balance": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Cw20ReceiveMsg": {
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Fee": {
        "type": "object",
        "required": [
          "share"
        ],
        "properties": {
          "share": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UpdateConfigParams": {
        "type": "object",
        "properties": {
          "deposit_enabled": {
            "description": "If users should be able to deposit funds to the contract.",
            "type": [
              "boolean",
              "null"
            ]
          },
          "flash_loan_enabled": {
            "description": "If users should be allowed to perform flash-loans.",
            "type": [
              "boolean",
              "null"
            ]
          },
          "new_fee_collector_addr": {
            "description": "The new address of the fee collector",
            "type": [
              "string",
              "null"
            ]
          },
          "new_owner": {
            "description": "The new owner of the contract.",
            "type": [
              "string",
              "null"
            ]
          },
          "new_vault_fees": {
            "description": "The new fees used for the vault",
            "anyOf": [
              {
                "$ref": "#/definitions/VaultFee"
              },
              {
                "type": "null"
              }
            ]
          },
          "withdraw_enabled": {
            "description": "if users should be able to withdraw funds from the contract.",
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "VaultFee": {
        "description": "Fees used by the flashloan vaults on the liquidity hub",
        "type": "object",
        "required": [
          "burn_fee",
          "flash_loan_fee",
          "protocol_fee"
        ],
        "properties": {
          "burn_fee": {
            "$ref": "#/definitions/Fee"
          },
          "flash_loan_fee": {
            "$ref": "#/definitions/Fee"
          },
          "protocol_fee": {
            "$ref": "#/definitions/Fee"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Retrieves the configuration of the contract.",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieves the share of the assets stored in the vault that a given `amount` of lp tokens is entitled to.",
        "type": "object",
        "required": [
          "share"
        ],
        "properties": {
          "share": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieves the protocol fees that have been collected. If `all_time` is `true`, will return the all time collected fees.",
        "type": "object",
        "required": [
          "protocol_fees"
        ],
        "properties": {
          "protocol_fees": {
            "type": "object",
            "required": [
              "all_time"
            ],
            "properties": {
              "all_time": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieves the fees that have been burned by the vault.",
        "type": "object",
        "required": [
          "burned_fees"
        ],
        "properties": {
          "burned_fees": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieves the [`Uint128`] amount that must be sent back to the contract to pay off a loan taken out.",
        "type": "object",
        "required": [
          "get_payback_amount"
        ],
        "properties": {
          "get_payback_amount": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "burned_fees": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProtocolFeesResponse",
      "type": "object",
      "required": [
        "fees"
      ],
      "properties": {
        "fees": {
          "$ref": "#/definitions/Asset"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Asset": {
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "info": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "additionalProperties": false
        },
        "AssetInfo": {
          "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "asset_info",
        "deposit_enabled",
        "fee_collector_addr",
        "fees",
        "flash_loan_enabled",
        "liquidity_token",
        "owner",
        "withdraw_enabled"
      ],
      "properties": {
        "asset_info": {
          "description": "The asset info the vault manages",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "deposit_enabled": {
          "description": "If deposits are enabled",
          "type": "boolean"
        },
        "fee_collector_addr": {
          "description": "The address of the fee collector",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "fees": {
          "description": "The fees associated with this vault",
          "allOf": [
            {
              "$ref": "#/definitions/VaultFee"
            }
          ]
        },
        "flash_loan_enabled": {
          "description": "If flash-loans are enabled",
          "type": "boolean"
        },
        "liquidity_token": {
          "description": "The address of the liquidity token",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "owner": {
          "description": "The owner of the vault",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "withdraw_enabled": {
          "description": "If withdrawals are enabled",
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetInfo": {
          "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Fee": {
          "type": "object",
          "required": [
            "share"
          ],
          "properties": {
            "share": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "VaultFee": {
          "description": "Fees used by the flashloan vaults on the liquidity hub",
          "type": "object",
          "required": [
            "burn_fee",
            "flash_loan_fee",
            "protocol_fee"
          ],
          "properties": {
            "burn_fee": {
              "$ref": "#/definitions/Fee"
            },
            "flash_loan_fee": {
              "$ref": "#/definitions/Fee"
            },
            "protocol_fee": {
              "$ref": "#/definitions/Fee"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_payback_amount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PaybackAmountResponse",
      "type": "object",
      "required": [
        "burn_fee",
        "flash_loan_fee",
        "payback_amount",
        "protocol_fee"
      ],
      "properties": {
        "burn_fee": {
          "description": "The amount of fee to be burned",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "flash_loan_fee": {
          "description": "The amount of fee paid to vault holders",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "payback_amount": {
          "description": "The total amount that must be returned. Equivalent to `amount` + `protocol_fee` + `flash_loan_fee`+ `burn_fee`.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "protocol_fee": {
          "description": "The amount of fee paid to the protocol",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "protocol_fees": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProtocolFeesResponse",
      "type": "object",
      "required": [
        "fees"
      ],
      "properties": {
        "fees": {
          "$ref": "#/definitions/Asset"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Asset": {
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "info": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "additionalProperties": false
        },
        "AssetInfo": {
          "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "share": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
